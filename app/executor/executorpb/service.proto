syntax = "proto3";

import "tools/protopatch/patch/go.proto";

option go_package = "github.com/cox96de/runner/app/executor/executorpb";
service Executor {
  rpc GetRuntimeInfo(GetRuntimeInfoRequest) returns (GetRuntimeInfoResponse);
  // Ping is used to check if the executor is alive.
  rpc Ping(PingRequest) returns (PingResponse);
  // Environment returns the environment variables of the executor.
  // Just like the os.Environ() function in Go.
  rpc Environment(EnvironmentRequest) returns (EnvironmentResponse);
  // StartCommand starts a command in the executor.
  rpc StartCommand(StartCommandRequest) returns (StartCommandResponse) {}
  // WaitCommand waits for a command to finish.
  rpc WaitCommand(WaitCommandRequest) returns (WaitCommandResponse) {}
  // GetCommandLog returns the log of a command.
  rpc GetCommandLog(GetCommandLogRequest) returns (stream Log) {}
}
message GetRuntimeInfoRequest {}
message GetRuntimeInfoResponse {
  string os = 1 [(go.field).name = "OS"];
  string arch = 2;
}
message PingRequest {}

message PingResponse {}

message EnvironmentRequest {}

message EnvironmentResponse {
  repeated string environment = 1;
}

message StartCommandRequest {
  repeated string commands = 1;
  string dir = 2;
  repeated string env = 3;
  string username = 4;
}

message StartCommandResponse {
  // CommandID is the unique identifier of the command.
  // It's generated by the executor and use it to get the status of the command.
  string command_id = 1 [(go.field).name = "CommandID"];
  ProcessStatus status = 2;
}

message ProcessStatus {
  int32 pid = 1;
  int32 exit_code = 2;
  bool exit = 3;
  string error = 4;
}

message WaitCommandRequest {
  string command_id = 1 [(go.field).name = "CommandID"];
  int64 timeout = 2;
}
message WaitCommandResponse {
  ProcessStatus status = 1;
}

message GetCommandLogRequest {
  string command_id = 1 [(go.field).name = "CommandID"];
}

message Log {
  LogSource source = 1;
  bytes output = 2;
}
enum LogSource {
  STDOUT = 0 [(go.value).name = "LogSourceStdout"];
  STDERR = 1 [(go.value).name = "LogSourceStderr"];
}
