// Code generated by MockGen. DO NOT EDIT.
// Source: model.go
//
// Generated by this command:
//
//	mockgen -destination mockgen_test.go -source model.go -package engine . Engine,Runner,Executor
//

// Package engine is a generated GoMock package.
package engine

import (
	context "context"
	io "io"
	reflect "reflect"

	entity "github.com/cox96de/runner/entity"
	executor "github.com/cox96de/runner/internal/executor"
	model "github.com/cox96de/runner/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockEngine is a mock of Engine interface.
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
}

// MockEngineMockRecorder is the mock recorder for MockEngine.
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance.
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// CreateRunner mocks base method.
func (m *MockEngine) CreateRunner(ctx context.Context, option *entity.Job) (Runner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRunner", ctx, option)
	ret0, _ := ret[0].(Runner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRunner indicates an expected call of CreateRunner.
func (mr *MockEngineMockRecorder) CreateRunner(ctx, option any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRunner", reflect.TypeOf((*MockEngine)(nil).CreateRunner), ctx, option)
}

// Ping mocks base method.
func (m *MockEngine) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockEngineMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockEngine)(nil).Ping), ctx)
}

// MockRunner is a mock of Runner interface.
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
}

// MockRunnerMockRecorder is the mock recorder for MockRunner.
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock instance.
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// GetExecutor mocks base method.
func (m *MockRunner) GetExecutor(ctx context.Context, name string) (Executor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutor", ctx, name)
	ret0, _ := ret[0].(Executor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutor indicates an expected call of GetExecutor.
func (mr *MockRunnerMockRecorder) GetExecutor(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutor", reflect.TypeOf((*MockRunner)(nil).GetExecutor), ctx, name)
}

// Start mocks base method.
func (m *MockRunner) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockRunnerMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRunner)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockRunner) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockRunnerMockRecorder) Stop(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRunner)(nil).Stop), ctx)
}

// MockExecutor is a mock of Executor interface.
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor.
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance.
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// GetCommandLogs mocks base method.
func (m *MockExecutor) GetCommandLogs(ctx context.Context, id string) io.ReadCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommandLogs", ctx, id)
	ret0, _ := ret[0].(io.ReadCloser)
	return ret0
}

// GetCommandLogs indicates an expected call of GetCommandLogs.
func (mr *MockExecutorMockRecorder) GetCommandLogs(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommandLogs", reflect.TypeOf((*MockExecutor)(nil).GetCommandLogs), ctx, id)
}

// GetCommandStatus mocks base method.
func (m *MockExecutor) GetCommandStatus(ctx context.Context, id string) (*model.GetCommandStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommandStatus", ctx, id)
	ret0, _ := ret[0].(*model.GetCommandStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommandStatus indicates an expected call of GetCommandStatus.
func (mr *MockExecutorMockRecorder) GetCommandStatus(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommandStatus", reflect.TypeOf((*MockExecutor)(nil).GetCommandStatus), ctx, id)
}

// Ping mocks base method.
func (m *MockExecutor) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockExecutorMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockExecutor)(nil).Ping), ctx)
}

// StartCommand mocks base method.
func (m *MockExecutor) StartCommand(ctx context.Context, id string, opt *executor.StartCommandRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCommand", ctx, id, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartCommand indicates an expected call of StartCommand.
func (mr *MockExecutorMockRecorder) StartCommand(ctx, id, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCommand", reflect.TypeOf((*MockExecutor)(nil).StartCommand), ctx, id, opt)
}
