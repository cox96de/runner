// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: server.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerClient interface {
	Ping(ctx context.Context, in *ServerPingRequest, opts ...grpc.CallOption) (*ServerPingResponse, error)
	CreatePipeline(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*CreatePipelineResponse, error)
	RequestJob(ctx context.Context, in *RequestJobRequest, opts ...grpc.CallOption) (*RequestJobResponse, error)
	RerunJob(ctx context.Context, in *RerunJobRequest, opts ...grpc.CallOption) (*RerunJobResponse, error)
	GetJobExecution(ctx context.Context, in *GetJobExecutionRequest, opts ...grpc.CallOption) (*GetJobExecutionResponse, error)
	CancelJobExecution(ctx context.Context, in *CancelJobExecutionRequest, opts ...grpc.CallOption) (*CancelJobExecutionResponse, error)
	ListJobExecutions(ctx context.Context, in *ListJobExecutionsRequest, opts ...grpc.CallOption) (*ListJobExecutionsResponse, error)
	UpdateJobExecution(ctx context.Context, in *UpdateJobExecutionRequest, opts ...grpc.CallOption) (*UpdateJobExecutionResponse, error)
	GetStepExecution(ctx context.Context, in *GetStepExecutionRequest, opts ...grpc.CallOption) (*GetStepExecutionResponse, error)
	UpdateStepExecution(ctx context.Context, in *UpdateStepExecutionRequest, opts ...grpc.CallOption) (*UpdateStepExecutionResponse, error)
	UploadLogLines(ctx context.Context, in *UpdateLogLinesRequest, opts ...grpc.CallOption) (*UpdateLogLinesResponse, error)
	GetLogLines(ctx context.Context, in *GetLogLinesRequest, opts ...grpc.CallOption) (*GetLogLinesResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
}

type serverClient struct {
	cc grpc.ClientConnInterface
}

func NewServerClient(cc grpc.ClientConnInterface) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) Ping(ctx context.Context, in *ServerPingRequest, opts ...grpc.CallOption) (*ServerPingResponse, error) {
	out := new(ServerPingResponse)
	err := c.cc.Invoke(ctx, "/Server/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) CreatePipeline(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*CreatePipelineResponse, error) {
	out := new(CreatePipelineResponse)
	err := c.cc.Invoke(ctx, "/Server/CreatePipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) RequestJob(ctx context.Context, in *RequestJobRequest, opts ...grpc.CallOption) (*RequestJobResponse, error) {
	out := new(RequestJobResponse)
	err := c.cc.Invoke(ctx, "/Server/RequestJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) RerunJob(ctx context.Context, in *RerunJobRequest, opts ...grpc.CallOption) (*RerunJobResponse, error) {
	out := new(RerunJobResponse)
	err := c.cc.Invoke(ctx, "/Server/RerunJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) GetJobExecution(ctx context.Context, in *GetJobExecutionRequest, opts ...grpc.CallOption) (*GetJobExecutionResponse, error) {
	out := new(GetJobExecutionResponse)
	err := c.cc.Invoke(ctx, "/Server/GetJobExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) CancelJobExecution(ctx context.Context, in *CancelJobExecutionRequest, opts ...grpc.CallOption) (*CancelJobExecutionResponse, error) {
	out := new(CancelJobExecutionResponse)
	err := c.cc.Invoke(ctx, "/Server/CancelJobExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) ListJobExecutions(ctx context.Context, in *ListJobExecutionsRequest, opts ...grpc.CallOption) (*ListJobExecutionsResponse, error) {
	out := new(ListJobExecutionsResponse)
	err := c.cc.Invoke(ctx, "/Server/ListJobExecutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) UpdateJobExecution(ctx context.Context, in *UpdateJobExecutionRequest, opts ...grpc.CallOption) (*UpdateJobExecutionResponse, error) {
	out := new(UpdateJobExecutionResponse)
	err := c.cc.Invoke(ctx, "/Server/UpdateJobExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) GetStepExecution(ctx context.Context, in *GetStepExecutionRequest, opts ...grpc.CallOption) (*GetStepExecutionResponse, error) {
	out := new(GetStepExecutionResponse)
	err := c.cc.Invoke(ctx, "/Server/GetStepExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) UpdateStepExecution(ctx context.Context, in *UpdateStepExecutionRequest, opts ...grpc.CallOption) (*UpdateStepExecutionResponse, error) {
	out := new(UpdateStepExecutionResponse)
	err := c.cc.Invoke(ctx, "/Server/UpdateStepExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) UploadLogLines(ctx context.Context, in *UpdateLogLinesRequest, opts ...grpc.CallOption) (*UpdateLogLinesResponse, error) {
	out := new(UpdateLogLinesResponse)
	err := c.cc.Invoke(ctx, "/Server/UploadLogLines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) GetLogLines(ctx context.Context, in *GetLogLinesRequest, opts ...grpc.CallOption) (*GetLogLinesResponse, error) {
	out := new(GetLogLinesResponse)
	err := c.cc.Invoke(ctx, "/Server/GetLogLines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/Server/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServer is the server API for Server service.
// All implementations must embed UnimplementedServerServer
// for forward compatibility
type ServerServer interface {
	Ping(context.Context, *ServerPingRequest) (*ServerPingResponse, error)
	CreatePipeline(context.Context, *CreatePipelineRequest) (*CreatePipelineResponse, error)
	RequestJob(context.Context, *RequestJobRequest) (*RequestJobResponse, error)
	RerunJob(context.Context, *RerunJobRequest) (*RerunJobResponse, error)
	GetJobExecution(context.Context, *GetJobExecutionRequest) (*GetJobExecutionResponse, error)
	CancelJobExecution(context.Context, *CancelJobExecutionRequest) (*CancelJobExecutionResponse, error)
	ListJobExecutions(context.Context, *ListJobExecutionsRequest) (*ListJobExecutionsResponse, error)
	UpdateJobExecution(context.Context, *UpdateJobExecutionRequest) (*UpdateJobExecutionResponse, error)
	GetStepExecution(context.Context, *GetStepExecutionRequest) (*GetStepExecutionResponse, error)
	UpdateStepExecution(context.Context, *UpdateStepExecutionRequest) (*UpdateStepExecutionResponse, error)
	UploadLogLines(context.Context, *UpdateLogLinesRequest) (*UpdateLogLinesResponse, error)
	GetLogLines(context.Context, *GetLogLinesRequest) (*GetLogLinesResponse, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	mustEmbedUnimplementedServerServer()
}

// UnimplementedServerServer must be embedded to have forward compatible implementations.
type UnimplementedServerServer struct {
}

func (UnimplementedServerServer) Ping(context.Context, *ServerPingRequest) (*ServerPingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedServerServer) CreatePipeline(context.Context, *CreatePipelineRequest) (*CreatePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePipeline not implemented")
}
func (UnimplementedServerServer) RequestJob(context.Context, *RequestJobRequest) (*RequestJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestJob not implemented")
}
func (UnimplementedServerServer) RerunJob(context.Context, *RerunJobRequest) (*RerunJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RerunJob not implemented")
}
func (UnimplementedServerServer) GetJobExecution(context.Context, *GetJobExecutionRequest) (*GetJobExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobExecution not implemented")
}
func (UnimplementedServerServer) CancelJobExecution(context.Context, *CancelJobExecutionRequest) (*CancelJobExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJobExecution not implemented")
}
func (UnimplementedServerServer) ListJobExecutions(context.Context, *ListJobExecutionsRequest) (*ListJobExecutionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobExecutions not implemented")
}
func (UnimplementedServerServer) UpdateJobExecution(context.Context, *UpdateJobExecutionRequest) (*UpdateJobExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobExecution not implemented")
}
func (UnimplementedServerServer) GetStepExecution(context.Context, *GetStepExecutionRequest) (*GetStepExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStepExecution not implemented")
}
func (UnimplementedServerServer) UpdateStepExecution(context.Context, *UpdateStepExecutionRequest) (*UpdateStepExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStepExecution not implemented")
}
func (UnimplementedServerServer) UploadLogLines(context.Context, *UpdateLogLinesRequest) (*UpdateLogLinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadLogLines not implemented")
}
func (UnimplementedServerServer) GetLogLines(context.Context, *GetLogLinesRequest) (*GetLogLinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogLines not implemented")
}
func (UnimplementedServerServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedServerServer) mustEmbedUnimplementedServerServer() {}

// UnsafeServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerServer will
// result in compilation errors.
type UnsafeServerServer interface {
	mustEmbedUnimplementedServerServer()
}

func RegisterServerServer(s grpc.ServiceRegistrar, srv ServerServer) {
	s.RegisterService(&Server_ServiceDesc, srv)
}

func _Server_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Ping(ctx, req.(*ServerPingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_CreatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).CreatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/CreatePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).CreatePipeline(ctx, req.(*CreatePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_RequestJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).RequestJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/RequestJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).RequestJob(ctx, req.(*RequestJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_RerunJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RerunJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).RerunJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/RerunJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).RerunJob(ctx, req.(*RerunJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_GetJobExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GetJobExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/GetJobExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GetJobExecution(ctx, req.(*GetJobExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_CancelJobExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelJobExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).CancelJobExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/CancelJobExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).CancelJobExecution(ctx, req.(*CancelJobExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_ListJobExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobExecutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).ListJobExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/ListJobExecutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).ListJobExecutions(ctx, req.(*ListJobExecutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_UpdateJobExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).UpdateJobExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/UpdateJobExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).UpdateJobExecution(ctx, req.(*UpdateJobExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_GetStepExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStepExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GetStepExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/GetStepExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GetStepExecution(ctx, req.(*GetStepExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_UpdateStepExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStepExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).UpdateStepExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/UpdateStepExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).UpdateStepExecution(ctx, req.(*UpdateStepExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_UploadLogLines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLogLinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).UploadLogLines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/UploadLogLines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).UploadLogLines(ctx, req.(*UpdateLogLinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_GetLogLines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogLinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GetLogLines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/GetLogLines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GetLogLines(ctx, req.(*GetLogLinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Server_ServiceDesc is the grpc.ServiceDesc for Server service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Server_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Server_Ping_Handler,
		},
		{
			MethodName: "CreatePipeline",
			Handler:    _Server_CreatePipeline_Handler,
		},
		{
			MethodName: "RequestJob",
			Handler:    _Server_RequestJob_Handler,
		},
		{
			MethodName: "RerunJob",
			Handler:    _Server_RerunJob_Handler,
		},
		{
			MethodName: "GetJobExecution",
			Handler:    _Server_GetJobExecution_Handler,
		},
		{
			MethodName: "CancelJobExecution",
			Handler:    _Server_CancelJobExecution_Handler,
		},
		{
			MethodName: "ListJobExecutions",
			Handler:    _Server_ListJobExecutions_Handler,
		},
		{
			MethodName: "UpdateJobExecution",
			Handler:    _Server_UpdateJobExecution_Handler,
		},
		{
			MethodName: "GetStepExecution",
			Handler:    _Server_GetStepExecution_Handler,
		},
		{
			MethodName: "UpdateStepExecution",
			Handler:    _Server_UpdateStepExecution_Handler,
		},
		{
			MethodName: "UploadLogLines",
			Handler:    _Server_UploadLogLines_Handler,
		},
		{
			MethodName: "GetLogLines",
			Handler:    _Server_GetLogLines_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Server_Heartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
